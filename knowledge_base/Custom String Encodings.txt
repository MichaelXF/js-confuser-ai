Metadata: {"url": "https://js-confuser.com/docs/options/customStringEncodings", "group": "Options"}

# Custom String Encodings


      
### Custom String Encodings

Custom String Encodings allows you to define your own string encoding/decoding functions.

-> Option name: `"customStringEncodings"`
-> Option values: `true/false/0-1`

---

      

    

    
#### Input / Output

This example showcases how `Custom String Encodings` transforms the code. Try it out by changing the input code and see changes apply in real-time.

---{ header: "Input.js", language: "javascript", live: true, options: true }
// This file is evaluated as JavaScript. You can use JavaScript here.
// Learn more: https://js-confuser.com/docs/getting-started/playground#jsconfuser-ts

module.exports = {
  target: 'browser',
  customStringEncodings: [
    {
      code: `
            function {fnName}(str){
              return atob(str)
            }
            `,
      encode: function (str) {
          return btoa(str);
        },
      decode: function (str) {
          return atob(str);
        },
    },
  ],
  stringConcealing: true,
  renameVariables: true,
  compact: false,
  minify: true,
};
===END OPTIONS===

      // Base64 Encoding Demo

      var str = "Hello, World!";
      console.log(str); // "Hello, World!"
      
---

---


    
      #### Custom String Encoding API

      The Custom String Encoding API allows you to define your own string encoding/decoding functions. These encodings will be randomly inserted throughout the code.
      
      ---{ header: "Options.js" }
      module.exports = {
        target: "node",

        // Should be enabled
        stringConcealing: true,

        // Simple Base64 Encoding
        customStringEncodings: [
          {
            // This template decoder function will be inserted into the code
            code: `
                  function {fnName}(str){
                    return atob(str);
                  }`,

            // Tells the obfuscator how to encode the string
            encode: (str) => btoa(str),
          },
        ],
      };
      ---

      ---

      The properties of the type `Custom String Encoding` are:

      | Property | Type | Description |
      | `code` | `string` | Template decoder code that must contain '{fnName}'. |
      | `encode` | `Function` | Encoding algorithm. |
      | `decode?` | `Function` | Decoding algorithm. (Optional) |
      | `identity?` | `string` | Distinguishes multiple encodings. (Optional) |

      - The template `code` should contain the string `{fnName}`, which the obfuscator can interpolate with the function name.

      - The functions `encode` and `decode` have the type: `(strValue: string) => string`.

      - The function `decode` is optional. If provided, the obfuscator will validate each string to ensure it can be decoded. If the string cannot be decoded, the obfuscator will ignore the string.

      ---
     
      #### Advanced Randomized Encoding

      The following example implements a custom Base64 encoding that uses a shuffled charset to encode and decode strings.

      - This encoding algorithm is instantiated multiple times, each with a different shuffled charset. This makes it difficult to reverse-engineer the encoding algorithm. 

      ---{ header: "Options.js" }
      const { default: JsConfuser } = require("js-confuser");
      const { stringLiteral } = require("@babel/types");

      function shuffle(array) {
        // Fisher-Yates shuffle
        let currentIndex = array.length,
          randomIndex;
        while (currentIndex !== 0) {
          randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex--;

          [array[currentIndex], array[randomIndex]] = [
            array[randomIndex],
            array[currentIndex],
          ];
        }
        return array;
      }

      function createCustomStringEncoding() {
        function encode(input, charset) {
          const inputBuffer = new TextEncoder().encode(input);
          let output = "";

          for (let i = 0; i < inputBuffer.length; i += 3) {
            const chunk = [inputBuffer[i], inputBuffer[i + 1], inputBuffer[i + 2]];

            const binary = (chunk[0] << 16) | (chunk[1] << 8) | (chunk[2] || 0);

            output += charset[(binary >> 18) & 0x3f];
            output += charset[(binary >> 12) & 0x3f];
            output +=
              typeof chunk[1] !== "undefined" ? charset[(binary >> 6) & 0x3f] : "=";
            output += typeof chunk[2] !== "undefined" ? charset[binary & 0x3f] : "=";
          }

          return output;
        }

        const customCharset =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        const shuffledCharset = shuffle(customCharset.split("")).join("");

        return {
          code: new JsConfuser.Template(`
            // Creates a reverse lookup table from the given charset
            function createReverseCharset(charset) {
              if (charset.length !== 64) {
                throw new Error("Charset must be exactly 64 characters long.");
              }
              const reverseCharset = {};
              for (let i = 0; i < charset.length; i++) {
                reverseCharset[charset[i]] = i;
              }
              return reverseCharset;
            }

            // Base64 decode using the shuffled charset
            function decode(input, charset) {
              const reverseCharset = createReverseCharset(charset);
              const cleanedInput = input.replace(/=+$/, '');  // Remove padding

              const byteArray = [];
              let buffer = 0;
              let bitsCollected = 0;

              for (let i = 0; i < cleanedInput.length; i++) {
                buffer = (buffer << 6) | reverseCharset[cleanedInput[i]];
                bitsCollected += 6;

                if (bitsCollected >= 8) {
                  bitsCollected -= 8;
                  byteArray.push((buffer >> bitsCollected) & 0xFF);
                }
              }

              // Convert to string, ensuring no extra characters
              return new TextDecoder().decode(Uint8Array.from(byteArray));
            }

            var {fnName} = (str) => decode(str, {shuffledCharset});
            `).setDefaultVariables({
            // This simply inserts 'shuffledCharset' (with proper escaping)
            shuffledCharset: stringLiteral(shuffledCharset),
          }),
          encode: (input) => {
            // Encode the string
            return encode(input, shuffledCharset);
          },

          // Identity key to help distinguish between different variants
          identity: shuffledCharset,
        };
      }

      module.exports = {
        target: "node",
        stringConcealing: true,
        customStringEncodings: [createCustomStringEncoding],
      };
      ---
      
---

    
    
    
#### Usage Example

The provided code example will obfuscate the file `input.js` and write the output to a file named `output.js`.

---{header: "Usage Example", language: "javascript"}
import JSConfuser from "js-confuser";
import {readFileSync, writeFileSync} from "fs";

// Read input code
const sourceCode = readFileSync("input.js", "utf8");
const options = {
  target: 'browser',
  customStringEncodings: [
    {
      code: `
            function {fnName}(str){
              return atob(str)
            }
            `,
      encode: function (str) {
          return btoa(str);
        },
      decode: function (str) {
          return atob(str);
        },
    },
  ],
  stringConcealing: true,
};

JSConfuser.obfuscate(sourceCode, options).then((result)=>{
  // Write output code
  writeFileSync("output.js", result.code);
}).catch(err=>{
  // Error occurred
  console.error(err);  
});
---

---

##### Enabled In

- [High Preset](/docs/presets/high): No
- [Medium Preset](/docs/presets/medium): No
- [Low Preset](/docs/presets/low): No 


    

    
    